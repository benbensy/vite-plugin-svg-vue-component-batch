import { resolve, relative, dirname } from "node:path";
import { fileURLToPath } from "node:url";
import type { Plugin } from "vite";
import fg from "fast-glob";
import { slugify } from "transliteration";
import fs from "fs-extra";

interface Options {
  dir: string | string[];
}

export default function svgVueComponentBatchPlugin(options: Options): Plugin {
  const virtualModuleId = "virtual:svg-components";
  const resolvedVirtualId = "\0" + virtualModuleId;
  const dirs = Array.isArray(options.dir) ? options.dir : [options.dir];

  let root = process.cwd();
  const pluginRoot = dirname(fileURLToPath(import.meta.url));
  let files: string[] = [];

  const getAllSvgFiles = async () => {
    const allFiles: string[] = [];
    for (const dir of dirs) {
      const svgDir = resolve(root, dir);
      const found = await fg("**/*.svg", { cwd: svgDir, onlyFiles: true });
      allFiles.push(...found.map(f => resolve(svgDir, f)));
    }
    return allFiles;
  };

  return {
    name: "vite-plugin-svg-vue-component-batch",
    enforce: "pre",

    configResolved(config) {
      root = config.root;
    },

    async buildStart() {
      files = await getAllSvgFiles();

      for (const dir of dirs) {
        this.addWatchFile(resolve(root, dir));
      }

      await generateDTS();
    },

    async handleHotUpdate({ file, server }) {
      if (!file.endsWith(".svg")) return;

      const isUnderWatchedDir = dirs.some(dir => file.startsWith(resolve(root, dir)));
      if (!isUnderWatchedDir) return;

      files = await getAllSvgFiles();
      await generateDTS();

      const mod = server.moduleGraph.getModuleById(resolvedVirtualId);
      if (mod) {
        server.moduleGraph.invalidateModule(mod);
        server.ws.send({ type: "full-reload" });
      }
    },

    configureServer(server) {
      const updateVirtualModule = async () => {
        files = await getAllSvgFiles();
        await generateDTS();

        const mod = server.moduleGraph.getModuleById(resolvedVirtualId);
        if (mod) {
          server.moduleGraph.invalidateModule(mod);
          server.ws.send({ type: "full-reload" });
        }
      };

      for (const dir of dirs) {
        const svgDir = resolve(root, dir);

        server.watcher.on("add", async (file) => {
          if (file.endsWith(".svg") && file.startsWith(svgDir)) {
            await updateVirtualModule();
          }
        });

        server.watcher.on("unlink", async (file) => {
          if (file.endsWith(".svg") && file.startsWith(svgDir)) {
            await updateVirtualModule();
          }
        });
      }
    },

    resolveId(id) {
      if (id === virtualModuleId) {
        return resolvedVirtualId;
      }
    },

    async load(id) {
      if (id !== resolvedVirtualId) return;

      const imports: string[] = [];
      const mappings: string[] = [];

      for (const file of files) {
        const name = normalizeName(file);
        const importPath =
          "/" + relative(root, file).replace(/\\/g, "/");
        const varName = `Icon_${name}`;

        imports.push(
          `const ${varName} = defineAsyncComponent(() => import('${importPath}?component'));`
        );
        mappings.push(`'${name}': ${varName}`);
      }

      return `import { defineAsyncComponent } from 'vue'

${imports.join("\n")}

export default {
  ${mappings.join(",\n  ")}
}
`;
    },
  };

  async function generateDTS() {
    const typeMappings: string[] = [];
    for (const file of files) {
      const name = normalizeName(file);
      typeMappings.push(`'${name}': DefineComponent<SVGAttributes>;`);
    }

    const dtsPath = resolve(pluginRoot, "svg-components.d.ts");
    const content = `// Generated by vite-plugin-svg-vue-component-batch
declare module '${virtualModuleId}' {
  import type { DefineComponent, SVGAttributes } from 'vue';
  
  const icons: {
  ${typeMappings.join("\n  ")}
}
  export default icons;
}
`;
    await fs.ensureFile(dtsPath);
    await fs.writeFile(dtsPath, content, "utf-8");
  }
}

function normalizeName(filePath: string) {
  slugify.config({
    lowercase: true,
    separator: "_",
    allowedChars: "a-zA-Z0-9_",
    unknown: "_",
  });

  const fileName = filePath.split(/[\\/]/).slice(-1)[0].replace(/\.svg$/, "");
  return slugify(fileName);
}